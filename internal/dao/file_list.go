// =================================================================================
// This file is auto-generated by the GoFrame CLI tool. You may modify it as needed.
// =================================================================================

package dao

import (
	"aurora-file-sharing/internal/dao/internal"
	"context"
	"database/sql"

	v1 "aurora-file-sharing/api/file_list/v1"

	"github.com/gogf/gf/v2/database/gdb"
)

// fileListDao is the data access object for the table file_list.
// You can define custom methods on it to extend its functionality as needed.
type fileListDao struct {
	*internal.FileListDao
}

var (
	// FileList is a globally accessible object for table file_list operations.
	FileList = fileListDao{internal.NewFileListDao()}
)

func (d *fileListDao) QueryByFileId(ctx context.Context, fileId string) (res gdb.Record, err error) {
	res, err = d.Ctx(ctx).Where("file_id = ?", fileId).One()
	if err != nil {
		return nil, err
	}
	return
}

// 通用数据库查询
func (d *fileListDao) Query(ctx context.Context, data *v1.FileListReq) (res *gdb.Model) {
	res = d.Ctx(ctx)
	if data.TagId != "" {
		res = res.Where("tag_id = ?", data.TagId)
	}
	if data.FileName != "" {
		res = res.Where("file_name like ?", "%"+data.FileName+"%")
	}
	res = res.Limit(data.PageSize, (data.Page-1)*data.PageSize)
	return
}

func (d *fileListDao) InsertAndGetId(ctx context.Context, data map[string]any) (res int64, err error) {
	res, err = d.Ctx(ctx).Data(data).InsertAndGetId()
	if err != nil {
		return 0, err
	}
	return
}

func (d *fileListDao) UpdateByFileName(ctx context.Context, fileName string, data map[string]any) (res sql.Result, err error) {
	res, err = d.Ctx(ctx).Data(data).Where("file_name = ?", fileName).Update()
	if err != nil {
		return nil, err
	}
	if _, err = res.RowsAffected(); err != nil {
		return nil, err
	}
	return
}

func (d *fileListDao) HasExistFileName(ctx context.Context, fileName string) (res gdb.Record, err error) {
	res, err = d.Ctx(ctx).Where("file_name = ?", fileName).One()
	if err != nil {
		return nil, err
	}
	return

}

func (d *fileListDao) DeleteByFileId(ctx context.Context, fileId string) (res sql.Result, err error) {
	res, err = d.Ctx(ctx).Where("file_id = ?", fileId).Delete()
	if err != nil {
		return nil, err
	}

	// 也许找不到这个数据，所以需要判断
	if _, err = res.RowsAffected(); err != nil {
		return nil, err
	}
	return
}
