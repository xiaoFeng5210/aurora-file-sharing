// =================================================================================
// This file is auto-generated by the GoFrame CLI tool. You may modify it as needed.
// =================================================================================

package dao

import (
	v1 "aurora-file-sharing/api/tags/v1"
	"aurora-file-sharing/internal/dao/internal"

	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/errors/gerror"
	"github.com/gogf/gf/v2/frame/g"
)

// tagsDao is the data access object for the table tags.
// You can define custom methods on it to extend its functionality as needed.
type tagsDao struct {
	*internal.TagsDao
}

var (
	// Tags is a globally accessible object for table tags operations.
	Tags = tagsDao{internal.NewTagsDao()}
)

// Add your custom methods and functionality below.
// 通用数据库查询
func (d *tagsDao) Query(ctx context.Context, data *v1.TagsReq) (res *gdb.Model) {
	res = d.Ctx(ctx)
	if data.TagId != "" {
		res = res.Where("tag_id = ?", data.TagId)
	}
	if data.TagName != "" {
		res = res.Where("tag_name like ?", "%"+data.TagName+"%")
	}
	res = res.Limit(data.PageSize, (data.Page-1)*data.PageSize)
	return
}

func (d *tagsDao) QueryByTagId(ctx context.Context, tagId string) (res gdb.Record, err error) {
	res, err = d.Ctx(ctx).Where("tag_id = ?", tagId).One()
	if err != nil {
		return nil, err
	}
	return
}

func (d *tagsDao) Create(ctx context.Context, data g.Map) (res int64, err error) {
	// 判断是否存在
	record, err := d.Ctx(ctx).Where("tag_name = ?", data["tag_name"]).One()
	if err != nil {
		return 0, err
	}
	if record != nil {
		return 0, gerror.New("标签已存在")
	}
	res, err = d.Ctx(ctx).Data(data).InsertAndGetId()
	if err != nil {
		return 0, err
	}
	return
}

// 删除通过tagId
func (d *tagsDao) Delete(ctx context.Context, tagId string) (err error) {
	result, err := d.Ctx(ctx).Where("tag_id = ?", tagId).Delete()
	if err != nil {
		return err
	}
	// 判断是否有这个标签，有这个标签代表删除成功了
	if rowsAffected, _ := result.RowsAffected(); rowsAffected == 0 {
		return gerror.New("没有找到这个标签，无法进行删除")
	}

	return
}

// 删除通过主键ID
func (d *tagsDao) DeleteById(ctx context.Context, id int64) (err error) {
	_, err = d.Ctx(ctx).Delete("id", id)
	if err != nil {
		return err
	}
	return
}
