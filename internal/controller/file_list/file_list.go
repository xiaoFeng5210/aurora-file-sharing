// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package file_list

import (
	"aurora-file-sharing/internal/dao"
	"context"

	"strings"

	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/net/ghttp"
	"github.com/google/uuid"
)

var (
	uploadDir      = "upload"
	uploadFileName = ""
)

func GenerateRandomID() string {
	return uuid.New().String()
}

func FileUpload(r *ghttp.Request) {
	file := r.GetUploadFile("file")
	if file == nil {
		r.Response.Write("file is nil")
		r.Response.WriteJson(
			g.Map{
				"code":    400,
				"message": "文件为空",
			},
		)
		return
	}

	fileName, err := file.Save(uploadDir)
	if err != nil {
		uploadFileName = ""
		r.Response.Write("upload failed")
		r.Response.WriteJson(
			g.Map{
				"code":    500,
				"message": "文件上传失败",
			},
		)
	}

	uploadFileName = fileName
	ctx := context.Background()
	fileType := strings.Split(fileName, ".")[1]

	record, err := dao.FileList.HasExistFileName(ctx, fileName)
	if err != nil {
		r.Response.WriteJson(
			g.Map{
				"code":    500,
				"message": "请检查服务器",
			},
		)
	}

	if record != nil {
		_, err = dao.FileList.UpdateByFileName(ctx, fileName, map[string]any{
			"file_oss_path":   uploadDir + "/" + fileName,
			"file_local_path": uploadDir + "/" + fileName,
		})
		if err != nil {
			r.Response.WriteJson(
				g.Map{
					"code":    500,
					"message": "更新文件失败",
				},
			)
		}
	} else {
		_, err = dao.FileList.InsertAndGetId(ctx, map[string]any{
			"tag_id":          "",
			"file_id":         GenerateRandomID(),
			"file_name":       fileName,
			"file_size":       file.Size,
			"file_type":       fileType,
			"file_oss_path":   uploadDir + "/" + fileName,
			"file_local_path": uploadDir + "/" + fileName,
		})
	}
	r.Response.WriteJson(
		g.Map{
			"code":    200,
			"message": "文件上传成功",
			"data":    fileName,
		},
	)
}
